name: deploy-to-kubernetes

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USER }}/ff-user:v1

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - uses: actions/checkout@v3

    - name: gradle cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: 19
        cache: 'gradle'

    - name: build
      working-directory: user-service
      run: |
        ./gradlew bootBuildImage --imageName ${DOCKER_IMAGE_NAME}
      env:
        prod: true
        docs_enabled: false
        postgres_username: postgres
        postgres_password: postgres
        postgres_url: postgresql://postgresdb/postgres
        r2dbc_postgres_password: ${postgres_password}

    - name: docker push
      run: |
        docker login --username ${{ secrets.DOCKER_USER }} --password-stdin <<< ${{ secrets.DOCKER_API_KEY }} &> /dev/null
        docker push ${DOCKER_IMAGE_NAME} &> /dev/null

    - name: config credential
      run: |
        mkdir ~/.aws
        base64 --decode <<< ${{ secrets.AWS_CRED }} > ~/.aws/credentials
        base64 --decode <<< ${{ secrets.AWS_CONFIG }} > ~/.aws/config
        base64 --decode <<< ${{ secrets.RSA_PRIVATE_KEY }} > deploy/prod/rsa.private.key
        base64 --decode <<< ${{ secrets.RSA_PUBLIC_KEY }} > deploy/prod/rsa.public.key
        aws eks update-kubeconfig --name findprofessional_cluster &> /dev/null

    - name: prod deploy
      run: |
        echo postgres_username=${{ secrets.postgres_username }} >> ./deploy/prod/.env
        echo postgres_password=${{ secrets.postgres_password }} >> ./deploy/prod/.env
        echo postgres_url=${{ secrets.postgres_url }} >> ./deploy/prod/.env
        echo r2dbc_postgres_password=${{ secrets.r2dbc_postgres_password }} >> ./deploy/prod/.env
        kubectl apply -k deploy/prod

    - name: cleanup
      if: always()
      run: |
        rm -rf ~/.docker \
               ~/.kube   \
               ~/.aws    \
               ./deploy/prod/rsa.private.key \
               ./deploy/prod/rsa.public.key \
               ./deploy/prod/.env
